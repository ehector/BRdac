// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// z_constructor
arma::cube z_constructor(const arma::mat& covariates, const int& S, const int& N, const int& p);
RcppExport SEXP _BRdac_z_constructor(SEXP covariatesSEXP, SEXP SSEXP, SEXP NSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(z_constructor(covariates, S, N, p));
    return rcpp_result_gen;
END_RCPP
}
// logPCL_all
double logPCL_all(const double& alpha, const double& phi, const arma::vec& beta_1, const arma::vec& beta_2, const arma::vec& beta_3, const arma::mat& y, const arma::mat& z_1_1, const arma::mat& z_2_1, const arma::mat& z_3_1, const arma::mat& z_1_2, const arma::mat& z_2_2, const arma::mat& z_3_2, const arma::vec& loc_1, const arma::vec& loc_2);
RcppExport SEXP _BRdac_logPCL_all(SEXP alphaSEXP, SEXP phiSEXP, SEXP beta_1SEXP, SEXP beta_2SEXP, SEXP beta_3SEXP, SEXP ySEXP, SEXP z_1_1SEXP, SEXP z_2_1SEXP, SEXP z_3_1SEXP, SEXP z_1_2SEXP, SEXP z_2_2SEXP, SEXP z_3_2SEXP, SEXP loc_1SEXP, SEXP loc_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_1(beta_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_2(beta_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_3(beta_3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z_1_1(z_1_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z_2_1(z_2_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z_3_1(z_3_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z_1_2(z_1_2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z_2_2(z_2_2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z_3_2(z_3_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type loc_1(loc_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type loc_2(loc_2SEXP);
    rcpp_result_gen = Rcpp::wrap(logPCL_all(alpha, phi, beta_1, beta_2, beta_3, y, z_1_1, z_2_1, z_3_1, z_1_2, z_2_2, z_3_2, loc_1, loc_2));
    return rcpp_result_gen;
END_RCPP
}
// logCL_all
double logCL_all(const arma::vec& par, const arma::mat& y, const arma::cube& z_1, const arma::cube& z_2, const arma::cube& z_3, const arma::mat& locs);
RcppExport SEXP _BRdac_logCL_all(SEXP parSEXP, SEXP ySEXP, SEXP z_1SEXP, SEXP z_2SEXP, SEXP z_3SEXP, SEXP locsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type z_1(z_1SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type z_2(z_2SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type z_3(z_3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type locs(locsSEXP);
    rcpp_result_gen = Rcpp::wrap(logCL_all(par, y, z_1, z_2, z_3, locs));
    return rcpp_result_gen;
END_RCPP
}
// Chessian_all_raw
List Chessian_all_raw(const arma::vec& par, const arma::mat& y, const arma::cube& z_1, const arma::cube& z_2, const arma::cube& z_3, const arma::mat& locs);
RcppExport SEXP _BRdac_Chessian_all_raw(SEXP parSEXP, SEXP ySEXP, SEXP z_1SEXP, SEXP z_2SEXP, SEXP z_3SEXP, SEXP locsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type z_1(z_1SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type z_2(z_2SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type z_3(z_3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type locs(locsSEXP);
    rcpp_result_gen = Rcpp::wrap(Chessian_all_raw(par, y, z_1, z_2, z_3, locs));
    return rcpp_result_gen;
END_RCPP
}
// Cscore_all
arma::mat Cscore_all(const arma::vec& par, const arma::mat& y, const arma::cube& z_1, const arma::cube& z_2, const arma::cube& z_3, const arma::mat& locs);
RcppExport SEXP _BRdac_Cscore_all(SEXP parSEXP, SEXP ySEXP, SEXP z_1SEXP, SEXP z_2SEXP, SEXP z_3SEXP, SEXP locsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type z_1(z_1SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type z_2(z_2SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type z_3(z_3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type locs(locsSEXP);
    rcpp_result_gen = Rcpp::wrap(Cscore_all(par, y, z_1, z_2, z_3, locs));
    return rcpp_result_gen;
END_RCPP
}
// quadratic_form_par
double quadratic_form_par(const arma::vec& par, const arma::mat& y, const arma::cube& z_1, const arma::cube& z_2, const arma::cube& z_3, const arma::mat& locs, const int& K);
RcppExport SEXP _BRdac_quadratic_form_par(SEXP parSEXP, SEXP ySEXP, SEXP z_1SEXP, SEXP z_2SEXP, SEXP z_3SEXP, SEXP locsSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type z_1(z_1SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type z_2(z_2SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type z_3(z_3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type locs(locsSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(quadratic_form_par(par, y, z_1, z_2, z_3, locs, K));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BRdac_z_constructor", (DL_FUNC) &_BRdac_z_constructor, 4},
    {"_BRdac_logPCL_all", (DL_FUNC) &_BRdac_logPCL_all, 14},
    {"_BRdac_logCL_all", (DL_FUNC) &_BRdac_logCL_all, 6},
    {"_BRdac_Chessian_all_raw", (DL_FUNC) &_BRdac_Chessian_all_raw, 6},
    {"_BRdac_Cscore_all", (DL_FUNC) &_BRdac_Cscore_all, 6},
    {"_BRdac_quadratic_form_par", (DL_FUNC) &_BRdac_quadratic_form_par, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_BRdac(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
